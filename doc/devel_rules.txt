SOME RULES FOR DEVELOPING FEMUS - draft

- Use .hpp for header files and .cpp for source files

- Use std::cout, do not use printf for output.

- If a function must be performed by only one processor (processor 0),
then write an ifproc INSIDE the FUNCTION.

- Divide the includes in 
FEMuS includes,
 C++ includes,
 other external libraries' includes.

- Always put include guards in header files.

- Write the function names with CapitalLettersLikeThisAndNotWithUnderscores.

- Try to put the includes EXPLICITLY WHERE THEY HAVE TO BE, 
  and not thinking that somewhere some include will lead me to the file i need...

- In the SCRIPTS, almost all the variables have a FM_ or FEMUS_ prefix.
 The variables without this prefix are like this because 
 they are defined for external packages
 For instance, PETSC_DIR and PETSC_ARCH are used to COMPILE PETSC.
 
 - when you create a NEW HEADER, make sure you change the INCLUDE GUARD.
 Then, make sure you add the new files to git.
 
 - when you change the name of a file, header or source, recompile all the applications
   and make sure that everything compiles correctly.
   
 - when you start a file, put the source code among the "namespace femus"

 - data encapsulation, please
 
##############################
###### APPLICATION ###########
##############################

######## How to SETUP a NEW APPLICATION of the LIBRARY (will do a script probably) #############
- Create a folder in the Applications directory with your main function and your src/header files
- Write the Cmakelists.txt file for it
- Add the reference to the application in the Cmakelists.txt of the package library
- open cmake-gui and run configure and generate
- NOW PAY ATTENTION TO WHAT HAPPENS WHEN YOU ADD SOURCE FILES to the LIBRARY (not to the application)! You have to update the LIST in the src/ cmake file!!! (use ls -1)
- now go to the binary directory and type make to generate the library
- then enter your application folder and run make to generate your executable

######## How to IMPLEMENT A NEW APPLICATION #############
- Follow the examples

###### How to change the mesh file of an application ###########
- Put the mesh file in the input/ directory
- Set the filename in the main file

####### How to schedule a suite of runs ##########
- Script

###### When you change the input file in the repo folder (NOT IN THE BINARY FOLDER) then you have to RERUN CMAKE !!! #############

####### How to RESTART a run of an application ##########
- THE WHOLE RUN is in a single "time" DIRECTORY...
  so to restart we will EXCLUSIVELY READ from THAT DIRECTORY

- Set the folder from which to restart in the file run_to_restart_from
- set the ITERATION NUMBER in the "initial_step" variable in the configuration file IN THE FOLDER OF THE CONSIDERED RUN!
- set the other parameters like "nsteps"

- We must be very careful.
- We must change ALMOST NOTHING
- Do not change NUMBER OF PROCESSORS
- Do not change NUMBER OF LEVELS
- Do not change the OUTPUT FOLDERNAME (of course...)



##################################
###### GIT CHEAT SHEET ###########
##################################

- First golden rule: using the manual never hurts.

- Set name and email in your computer:

  git config --global user.name "Name Surname"
  git config --global user.email "name.surname@example.com"

  To check what configuration you obtained, do 

  git config --list 

  (this shows you more than you see with "git config -e"
  because it also reads other git configuration files,
  such as $HOME/.gitconfig)

- To contribute:
  Create a personal github account 
  Create a fork of the femus repository in your github account
  Clone your fork in your computer
  Work in your computer (do branches, commit changes, ...)
  Push your branches back to your fork 
  Send a pull request to the main femus repository
  The maintainers will decide what to do with the pull request and possibly it will be merged to master
  Periodically, sync the master in the fork with the master in the main femus repository

##################################

WORKFLOW for updating the master in the FORK from the master in the MAIN REPO

In github:

Go in the MAIN REPO

Click on "Pull requests" (on the right)
Click on "New pull request" (green button)
Click on "compare across forks"
The "base fork" is going to be the FORK master branch
The "head fork" is going to be the MAIN master branch
Click on "create pull request"
Add some title for it
Make sure that the branches can be AUTOMATICALLY MERGED (otherwise you have to solve the conflicts using command line...)
Click on "Merge pull request" (you find it by scrolling towards the bottom of the page)
Click on "Confirm merge"

From command line:

To be added

##################################

How to install HDFVIEW

Follow the instruction in the HDFVIEW website

At the end of the build process, you should have an hdfview.sh script inside the bin directory of your build.
You must open that script and change the INSTALLDIR variable with the path of this build (by default, /usr/local is in it)

Another alternative to view the content of an HDF5 file is to use the 'h5dump' utility shipped with HDF5 (installed through PETSc, for instance)


#############################################
###### SALOME - HOW TO MESH #################
#############################################

 Use the NoteBook tab to define variables and parametrize your operations!

- Geometry

Create faces (Draw points and lines if needed, or create Faces directly)
   --> Extract edges from a face (Explode)
   
- Mesh 
Create Mesh object (only initialize)
Create SubMesh of Mesh over the wanted SubGeometry
   --> Hypothesis: Propagation of 1D Hypothesis

In Mesh:
   2D: Quadrangle Mapping
   1D: Wire Discretization, or another SubMesh with Propagation in the other direction (this would overwrite Wire Discretization)
   
   Build CompoundMesh to merge the meshes
     --> Check the Boundary of the CompoundMesh!!! 
     ---> You need to remove previous boundary elements that now are inside the new domain!
          To do so you do "Remove elements" and you set a filter "Free borders - Not": inner boundary elements are non-free borders
     --> Rename it to "Mesh" + something!!!
     
- Then, Groups of Mesh elements 
  (must be named Group_X_Y, where X is the flag given to the object and Y is the type of boundary condition (0 = Dirichlet, 1 = Neumann). What about the groups that are not for boundary conditions?)

  In order to enforce Boundary Conditions, Material Properties, and potentially other things too,
  we have to define Groups of Edges, or Faces, or Volumes (Groups of Nodes for the extremes of a 1d domain)
  
  The flexible way to define these groups is NOT by selecting the IDs but by doing either "Group on geometry" or "Group on filter"

 #############################################
###### SALOME - HOW TO SHARE SUBMESHES ON CONTIGUOUS FACES #################
############################################# 

When you explode adjacent faces, the edges are called differently... we should identify them

#############################################
###### SALOME - HOW TO MESH - 3D ############
#############################################

- If I want to create a mesh of a Box with 3 arbitrary mesh discretizations in the 3 directions,
  what is the best way to do that?
  
- If your mesh can be thought of as an Extrusion of a 2D mesh, one way to do this 
  is simply to do your 2D mesh and then to 

I cannot creat a Submesh of a Submesh

- Geometry
  Create Volumes
    ---> Extract Faces from a Volume
    ---> Extract Edges from 2 faces in order to do Submesh of 3 edges in the x,y,z directions
- Mesh 
  I'd say I'll treat a Face like I do in 2D, and then do a Mapping to opposite Faces...
  You don't want to do Automatic Hexahedralization or Tetrahedralization...
  
- Another method could perhaps be to create 1d meshes and Propagate their Hypothesis on opposite edges!
  Global Algorithms:
    3d: Hexahedron (i,j,k)
    2d: Quadrangle mapping
    1d: Wire discretization  - Here sometimes it gives trouble if you don't specify any "Number of Segments"...
    
    Do 3 submeshes on 3 Edges, and on each of them establish a "Propagate hypothesis on opposite edges"
    
    
  
##################################
###### SALOME - SHAPER MODULE ####
##################################

This is a new module that in the long run is supposed to replace the role of the GEOM module.
In the meantime, you can:
  - perform drawing operations in the Shaper module 
  - do "Export to Geom" if you want to then do the meshing.

To draw stuff in Shaper, first create a Part with "New Part".

Notice: things that are exported to Geom are those that appear under the "Results" of a Part.
If you have no object in the Results, nothing will be exported to Geometry.

Then, it's not so clear how to start setting points... Should I use Construction, or Sketch... or Build...

Ok, it seems like:
 - Sketch is for drawing things "imprecisely", as if it was a real sketch, without specifying precise coordinates and so on.
 - Construction allows to put precise information

 When you do a Sketch, remove the Interaction Style Switch (white mouse icon)
 
##################################
###### SALOME - ROTATIONS ########
##################################

If you have to rotate, do not do that in the Geometry, because then the Mesh will not follow.
If you do it in the Mesh, the Geometry does not follow either.

##################################
###### SALOME - SPLIT EDGES/FACES ########
##################################

The tool for this is: Partition then Explode. At first it seems like with Partition no split happens, but then if you do Explode you will get all the pieces
It seems like Cut is not the right tool for splitting

Pay attention to the difference between Common and Intersection


########################################
###### SALOME - QUADRILATERAL MESH of a CIRCLE/SEMISPHERE ######
########################################

Divided Disk or Divided Cylinder do exactly what you are looking for!!!

Partition a semisphere using a Divided Disk!

Beware: it is essential that a vertex of the inner square is aligned with the "meridian arc" that is intrinsic in the generation of a Sphere surface!

For a circle, just do a square in the middle, then divide the circumference into for parts,
join the angles of the squares with the vertices of these parts and you are done.

For the semisphere, if you try the same it doesn't work, because the faces that are constructed
do not belong to the original semisphere...

So the idea seems to be NOT the following:
 - make curved edges on the semisphere
 - use them to create curved faces
  So, try to avoid starting from the Edges and instead keep yourself at the level of Faces.
  Then only at the end you will Explode to get the Edges (that you may need later for submeshes)
  
  Also, try not to cut too much, because if you do so you may have multiple edges on one side and then it is not so easy to mesh...
 
 The other way to go is to directly create subfaces by Partition of the semisphere!
 
 First you split, then you join...
 
 Now:
 
 - Fuse doesn't work with non-planar faces...
 - Glue Edges is to put together coincident edges, but not to remove them
 - It seems like the right option is Sewing, then Union faces, then Explode to get the edges for the submeshes
 - The only problem is that now one face does not have 4 edges, but one side can be made of multiple edges,
   and that creates problems in the mapping algorithm. So, it's all about making 1 edge
   
   
########################################
###### SALOME - QUESTIONS ######
########################################   

- What is the difference between Regular Faces and Free Faces in the Mesh algorithms?

- Is it possible to merge items obtained by Explode command? If I have 5 edges exploding from a quadrangular face,
  where 2 of them form one of the actual 4 edges, can I merge them so that the face looks to have 4 items instead?
